#lang pie

(claim refl
  (Pi ((X U) (x X))
    (= X x x)))

(define refl
  (λ (X x)
    (same x)))

(claim sym
  (Pi ((X U) (x X) (y X))
    (-> (= X x y) (= X y x))))

(define sym ;use symm
  (λ (X x y eq)
    ( symm eq)))

(claim transs
  (Pi ((X U) (x X) (y X) (z X))
    (-> (= X x y) (= X y z) (= X x z))))

(define transs ;use trans
  (λ (X x y z)
    (λ (eq1 eq2)
      (trans eq1 eq2))))

;(refl Nat (add1 3))

;(sym Atom 'hello (car (the (Pair Atom Nat) (cons 'hello 3))) (refl Atom 'hello))

;(transs Nat 3 (add1 2) (add1 (add1 1)) (same 3) (same (add1 2)))

(claim + (-> Nat Nat Nat))
(define +
  (λ (n k)
    (iter-Nat n
      k
      (λ (num) (add1 num)
        ))))

(claim twice (-> Nat Nat))
(define twice (λ (n) (+ n n)))

(claim double (-> Nat Nat))
(define double (λ (n) (iter-Nat n 0 (+ 2))))

;(claim twoTimesEqual (= (-> Nat Nat) twice double))
;(define twoTimesEqual TODO)

;(claim twice=double
;  (Pi ((n Nat))
;    (= Nat (twice n) (double n))))

;(define twice=double TODO)

(claim mot-add1+=+add1
  (-> Nat Nat U))

(define mot-add1+=+add1
  (λ (j k)
    (= Nat (add1 (+ k j)) (+ k (add1 j)))))

(claim step-add1+=+add1
  (Pi ((j Nat) (n-1 Nat))
    (-> (mot-add1+=+add1 j n-1)
        (mot-add1+=+add1 j (add1 n-1)))))

(define step-add1+=+add1
  (λ (j n-1)
    (λ (add1+=add1n-1)
      (cong add1+=add1n-1 (+ 1)))))

(claim add1+=+add1
  (Pi ((n Nat) (j Nat))
    (= Nat (add1 (+ n j)) (+ n (add1 j)))))

(define add1+=+add1
  (λ (n j)
    (ind-Nat n
      (mot-add1+=+add1 j)
      (same (add1 j))
      (step-add1+=+add1 j))))

(add1+=+add1 2 3)