#lang pie

(claim incr (-> Nat Nat))
(define incr ( λ (n) (add1 n)))

(claim mot-countfrom
  (-> Nat U))

(define mot-countfrom
  (λ (n)
     (Vec Nat n)))


(claim step-countfrom
  (Pi ((start Nat) (len Nat))
    (-> (mot-countfrom len) (mot-countfrom (add1 len)))))

(define step-countfrom
  (λ (n k)
    (λ (es)
      (vec:: n es))))


(claim mot
  (Pi ((k Nat))
    U))

(define mot
  (λ (l)
    (-> Nat (Vec Nat l))))

(claim step
  (Pi ((l-1 Nat))
     (-> (mot l-1) (mot (add1 l-1)))))

(define step
  (λ (l-1)
    (λ (myfunc)
      (λ (k) (vec:: k (myfunc (add1 k)))))))

(claim countfrom
  (Pi ((n Nat))
    (-> Nat (Vec Nat n))))

(define countfrom
  (λ (l)
      (ind-Nat l
        mot
        (the (-> Nat (Vec Nat 0)) (λ (n) vecnil))
        step)))


(claim countup
  (Pi ((n Nat))
    (Vec Nat n)))

(define countup
  (λ (n)
    (countfrom n 0)))

(countfrom 3 2)

(countup 5)




        
